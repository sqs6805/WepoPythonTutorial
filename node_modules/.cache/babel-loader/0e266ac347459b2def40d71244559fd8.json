{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"/Users/suvarna/Desktop/WepoPythonTutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/suvarna/Desktop/WepoPythonTutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport insert from './component/insert';\nimport css from './module/css';\nimport attach from './module/attach';\nimport emitter from './module/emitter';\nvar defaults = {\n  prefix: 'material',\n  class: 'tree',\n  functions: ['render', 'select'],\n  target: '.item-tree',\n  events: [['root.click', 'onSelect']]\n};\n\n/**\n * Tree component\n * @class\n * @param {Object} options Default options for view\n * @extends {View}\n * @since 0.0.4\n * @author Jerome Vial\n *\n * @type {prime}\n */\nvar Tree = /*#__PURE__*/function () {\n  /**\n   * init\n   * @return {Object} The class options\n   */\n  function Tree(options) {\n    _classCallCheck(this, Tree);\n    this.options = Object.assign({}, defaults, options || {});\n    this.init();\n    this.build();\n    this.attach();\n    return this;\n  }\n\n  /**\n   * [_initView description]\n   * @return  Class instance\n   */\n  _createClass(Tree, [{\n    key: \"init\",\n    value: function init() {\n      // init this\n\n      this.name = this.options.name;\n      this.filters = [];\n      this.data = [];\n      this.items = [];\n\n      // assign modules\n      Object.assign(this, emitter, insert, attach);\n\n      // init function\n      this._initFunction(this.options.functions);\n      return this;\n    }\n    /**\n     * [_initFunction description]\n     * @param  {?} functions [description]\n     * @return {}           [description]\n     */\n  }, {\n    key: \"_initFunction\",\n    value: function _initFunction(functions) {\n      for (var i = 0; i < functions.length; i++) {\n        var name = functions[i];\n        if (this.options[name]) {\n          this[name] = this.options[name];\n        }\n      }\n    }\n    /**\n     * [_initList description]\n     * @param  {Object} options this class options\n     * @return {Object} The class instance\n     */\n  }, {\n    key: \"build\",\n    value: function build() {\n      // define main tag\n      var tag = this.options.tag || 'div';\n      this.root = document.createElement(tag);\n      css.add(this.root, this.options.prefix + '-' + this.options.class);\n      if (this.options.container) {\n        this.insert(this.options.container);\n      }\n      if (this.options.data) {\n        this.buildTree(this.options.data);\n      }\n\n      // this.root.addEventListener(\"click\", function(e) {\n      //   // console.log(\"list\", this, e);\n      //   // e.target was the clicked element\n      // });\n\n      return this;\n    }\n  }, {\n    key: \"buildTree\",\n    value: function buildTree(data) {\n      this.root.innerHTML = '';\n\n      // console.log('buildTree', data);\n\n      var tree = '';\n      function checkChildren(parentObj, level) {\n        if (level) {\n          level++;\n        } else {\n          level = 0;\n        }\n        level++;\n\n        // console.log('-- ', level, parentObj);\n        if (parentObj.path) {\n          var level = parentObj.path.split('/').length - 1;\n          if (level > 0) {\n            tree += '<li class=\"item-tree\" data-path=\"' + parentObj.path + '\">' + parentObj.name;\n          }\n        } else {\n          if (level > 1) {\n            tree += '<li class=\"item-tree\" data-id=\"' + parentObj._id + '\">' + parentObj.name;\n          }\n        }\n        if (parentObj.children && parentObj.children.length > 0) {\n          tree += '<ul>';\n          for (var i = 0; i < parentObj.children.length; i++) {\n            var children = parentObj.children[i];\n            checkChildren(children, level);\n          }\n          tree += '</ul>';\n        }\n        if (level > 0) {\n          tree += '</li>';\n        }\n      }\n      checkChildren(data);\n\n      // console.log('html tree', tree);\n\n      this.root.innerHTML = tree;\n      return tree;\n    }\n  }, {\n    key: \"getOptions\",\n    value: function getOptions() {\n      // console.log(this.options)\n    }\n    /**\n     * This method handles onSelect\n     * @param  {event} e [description]\n     * @return {?}   [description]\n     */\n  }, {\n    key: \"onSelect\",\n    value: function onSelect(e) {\n      // console.log('click', e.target, this.options.target)\n      if (e.target && e.target.matches(this.options.target)) {\n        // console.log('item clicked: ', e.target)\n\n        css.remove(this.item, 'is-selected');\n        css.add(e.target, 'is-selected');\n        this.item = e.target;\n        if (this.select) {\n          this.select(this.item, e);\n        }\n      }\n      return this;\n    }\n    /**\n     * select\n     * @param  {Element} item  [description]\n     * @param  {event} event The caller event\n     * @return        [description]\n     */\n  }, {\n    key: \"select\",\n    value: function select(item, event) {\n      // console.log('select', item, event)\n      this.item = item;\n      this.emit('selected', item[0]);\n    }\n    /**\n     * Setter\n     * @param {string} prop\n     * @param {string} value\n     */\n  }, {\n    key: \"set\",\n    value: function set(prop, value, options) {\n      switch (prop) {\n        case 'tree':\n          this.setTree(value, options);\n          break;\n        default:\n          this.setTree(prop);\n      }\n      return this;\n    }\n    /**\n     * Set list\n     * @param {Array} list List of info object\n     * @return {Object} The class instance\n     */\n  }, {\n    key: \"setTree\",\n    value: function setTree(data) {\n      this.buildTree(data);\n      return this;\n    }\n    /**\n     * [add description]\n     * @param {Object} item [description]\n     */\n  }, {\n    key: \"addItem\",\n    value: function addItem(item /*, index */) {\n      if (!item) {\n        return;\n      }\n      var where = 'bottom';\n      this.insertElement(item.root, this.root, where);\n      // item.insert(this.root, where);\n      this.items.push(item);\n      return item;\n    }\n  }, {\n    key: \"empty\",\n    value: function empty() {\n      // console.log('empty')\n      this.root.innerHTML = '';\n      this.items = [];\n      this.item = null;\n    }\n  }]);\n  return Tree;\n}();\nexport default Tree;","map":null,"metadata":{},"sourceType":"module"}