{"ast":null,"code":"import _objectSpread from \"/Users/suvarna/Desktop/WepoPythonTutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/suvarna/Desktop/WepoPythonTutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport composeClasses from '../composeClasses';\nimport { getButtonUtilityClass } from './buttonClasses';\nimport useButton from '../useButton';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var active = ownerState.active,\n    disabled = ownerState.disabled,\n    focusVisible = ownerState.focusVisible;\n  var slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active']\n  };\n  return composeClasses(slots, useClassNamesOverride(getButtonUtilityClass));\n};\n/**\r\n * The foundation for building custom-styled buttons.\r\n *\r\n * Demos:\r\n *\r\n * - [Button](https://mui.com/base/react-button/)\r\n *\r\n * API:\r\n *\r\n * - [Button API](https://mui.com/base/react-button/components-api/#button)\r\n */\nvar Button = /*#__PURE__*/React.forwardRef(function Button(props, forwardedRef) {\n  var _slots$root;\n  var action = props.action,\n    children = props.children,\n    disabled = props.disabled,\n    _props$focusableWhenD = props.focusableWhenDisabled,\n    focusableWhenDisabled = _props$focusableWhenD === void 0 ? false : _props$focusableWhenD,\n    onFocusVisible = props.onFocusVisible,\n    _props$slotProps = props.slotProps,\n    slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n    _props$slots = props.slots,\n    slots = _props$slots === void 0 ? {} : _props$slots,\n    other = _objectWithoutProperties(props, [\"action\", \"children\", \"disabled\", \"focusableWhenDisabled\", \"onFocusVisible\", \"slotProps\", \"slots\"]);\n  var buttonRef = React.useRef();\n  var _useButton = useButton(_objectSpread({}, props, {\n      focusableWhenDisabled: focusableWhenDisabled\n    })),\n    active = _useButton.active,\n    focusVisible = _useButton.focusVisible,\n    setFocusVisible = _useButton.setFocusVisible,\n    getRootProps = _useButton.getRootProps;\n  React.useImperativeHandle(action, function () {\n    return {\n      focusVisible: function focusVisible() {\n        setFocusVisible(true);\n        buttonRef.current.focus();\n      }\n    };\n  }, [setFocusVisible]);\n  var ownerState = _objectSpread({}, props, {\n    active: active,\n    focusableWhenDisabled: focusableWhenDisabled,\n    focusVisible: focusVisible\n  });\n  var classes = useUtilityClasses(ownerState);\n  var defaultElement = other.href || other.to ? 'a' : 'button';\n  var Root = (_slots$root = slots.root) != null ? _slots$root : defaultElement;\n  var rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalForwardedProps: other,\n    externalSlotProps: slotProps.root,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState: ownerState,\n    className: classes.root\n  });\n  return /*#__PURE__*/_jsx(Root, _objectSpread({}, rootProps, {\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Button.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\r\n   * A ref for imperative actions. It currently only supports `focusVisible()` action.\r\n   */\n  action: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.shape({\n      focusVisible: PropTypes.func.isRequired\n    })\n  })]),\n  /**\r\n   * @ignore\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * If `true`, the component is disabled.\r\n   * @default false\r\n   */\n  disabled: PropTypes.bool,\n  /**\r\n   * If `true`, allows a disabled button to receive focus.\r\n   * @default false\r\n   */\n  focusableWhenDisabled: PropTypes.bool,\n  /**\r\n   * @ignore\r\n   */\n  href: PropTypes.string,\n  /**\r\n   * @ignore\r\n   */\n  onFocusVisible: PropTypes.func,\n  /**\r\n   * The props used for each slot inside the Button.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\r\n   * The components used for each slot inside the Button.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\r\n   * @ignore\r\n   */\n  to: PropTypes.string\n} : void 0;\nexport default Button;","map":null,"metadata":{},"sourceType":"module"}