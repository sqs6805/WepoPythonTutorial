{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"/Users/suvarna/Desktop/WepoPythonTutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/suvarna/Desktop/WepoPythonTutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport create from './component/create';\nimport _insert from './element/insert';\nimport event from './element/event';\nimport offset from './element/offset';\nimport emitter from './module/emitter';\nvar defaults = {\n  prefix: 'material',\n  class: 'banner',\n  tag: 'div'\n};\n\n/**\n * Class representing a UI Container. Can add components.\n *\n * @extends Component\n * @return {parent} The class instance\n * @example new Container({\n *   container: document.body\n * });\n */\nvar Banner = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   * @param  {Object} options - Component options\n   * @return {Object} Class instance\n   */\n  function Banner(options) {\n    _classCallCheck(this, Banner);\n    // init and build\n    this.init(options);\n    this.build();\n    this.attach();\n    return this;\n  }\n\n  /**\n   * Init class\n   * @params {Object} options The instance options\n   * @return {Object} This class instance\n   */\n  _createClass(Banner, [{\n    key: \"init\",\n    value: function init(options) {\n      this.options = Object.assign({}, defaults, options || {});\n      Object.assign(this, emitter);\n      return this;\n    }\n    /**\n     * [build description]\n     * @return {Object} This class  instance\n     */\n  }, {\n    key: \"build\",\n    value: function build() {\n      this.root = create(this.options);\n      if (this.options.container) {\n        _insert(this.root, this.options.container);\n      }\n      return this;\n    }\n  }, {\n    key: \"attach\",\n    value: function attach() {\n      var _this = this;\n      event.add(this.root, 'click', function (ev) {\n        // console.log('click', ev.target)\n\n        if (ev.target && ev.target.classList.contains('material-button')) {\n          var name = ev.target.getAttribute('data-name');\n          // console.log('name', name)\n          _this.emit('select', name);\n          _this.dismiss(ev.target);\n        }\n        ev.stopPropagation();\n      });\n      this.root.addEventListener('DOMNodeInserted', function (e) {\n        // console.log('DOMNodeInserted', e.target)\n        var textNode = e.target;\n        if (textNode == _this.root) {\n          // console.log('banner root inserted', e.target)\n          if (!_this.wrapper) {\n            _this.wrap();\n          }\n          _this.scroll(_this.view);\n        }\n        _this.updatePaddingView();\n\n        // if (textNode !== this.root) return\n      });\n    }\n  }, {\n    key: \"dismiss\",\n    value: function dismiss() {\n      this.wrapper.classList.add('is-closed');\n      this.wrapper.style.height = '0';\n      this.updatePaddingView();\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      console.log('this.height', this.height);\n      this.wrapper.classList.remove('is-closed');\n      this.wrapper.style.height = this.height + 'px';\n      this.updatePaddingView();\n      this.updatePosition();\n    }\n  }, {\n    key: \"wrap\",\n    value: function wrap() {\n      this.view = this.root.parentNode;\n\n      // console.log('wrap', this.root, this.view)\n      this.wrapper = document.createElement('div');\n      this.wrapper.classList.add('banner-wrapper');\n      this.view.insertBefore(this.wrapper, this.root);\n      this.wrapper.appendChild(this.root);\n\n      // insert(this.wrapper, this.root, 'before')\n\n      // insert(this.root, this.wrapper)\n    }\n  }, {\n    key: \"updatePaddingView\",\n    value: function updatePaddingView() {\n      // console.log('updatePaddingView', this.view)\n\n      this.height = offset(this.root, 'height');\n      if (!this.paddingview) {\n        this.paddingview = window.getComputedStyle(this.view)['padding-top'];\n      }\n\n      // this.root.style.top = 'top: ' + this.paddingview\n\n      // console.log('paddingTop', padding)\n      // if (!padding) padding = window.getComputedStyle(this.root.parentNode, 'padding')\n      // console.log('padding', padding)\n\n      var padding = parseInt(this.paddingview, 10);\n      var size = parseInt(this.height, 10);\n      this.padding = padding;\n\n      // console.log(' banner inserted in', size, 'padding', padding)\n      //\n      //\n\n      var ptop = this.ptop = padding;\n      if (this.wrapper.classList.contains('is-fixed') && !this.wrapper.classList.contains('is-closed')) {\n        var ptop = this.ptop = size + padding;\n      }\n      this.view.setAttribute('style', 'padding-top: ' + ptop + 'px');\n    }\n  }, {\n    key: \"scroll\",\n    value: function scroll(view) {\n      var _this2 = this;\n      // console.log('initScroll', offset(this.root, 'top'), offset(view, 'top'))\n\n      var isBody = false;\n      var element = view;\n      this.scrolling = view;\n      if (view === document.body) {\n        isBody = true;\n        element = document;\n        this.scrolling = document.body;\n      }\n\n      // view.classList.add()\n\n      element.addEventListener('scroll', function (e) {\n        // console.log('scroll', this.view)\n        _this2.updatePosition();\n      });\n    }\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition() {\n      var view = this.view;\n      var scrollTop;\n      if (view === document.body) {\n        scrollTop = (document.documentElement || document.body.parentNode || document.body).scrollTop;\n      } else {\n        scrollTop = view.scrollTop;\n      }\n\n      // var o = offset(this.root, 'top') - offset(view, 'top')\n      // console.log('o', this.root.offsetTop)\n\n      var padding = this.paddingview;\n      padding = parseInt(padding, 10);\n\n      // console.log('scroll', scrollTop, padding)\n\n      if (scrollTop > padding) {\n        var y = scrollTop - padding;\n        // console.log('fixed', y)\n        this.wrapper.classList.add('is-fixed');\n        this.wrapper.style.transform = 'translateY(' + y + 'px)';\n\n        // this.update(scrollTop, padding)\n        // this.wrapper.setAttribute('style', 'top: ' + this.paddingview)\n        this.wrapper.style.top = this.paddingview;\n      } else {\n        // console.log('relative')\n        this.wrapper.classList.remove('is-fixed');\n        this.wrapper.style.transform = 'translateY(' + 0 + 'px)';\n        this.wrapper.style.top = '0';\n        // this.wrapper.setAttribute('style', 'top: ' + this.paddingview)\n        // this.wrapper.setAttribute('style', 'top: 0')\n      }\n\n      this.updatePaddingView();\n    }\n  }, {\n    key: \"update\",\n    value: function update(scrollTop, padding) {}\n  }, {\n    key: \"insert\",\n    value: function insert(container, context) {\n      _insert(this.root, container, context);\n      return this;\n    }\n  }]);\n  return Banner;\n}();\nexport default Banner;","map":null,"metadata":{},"sourceType":"module"}