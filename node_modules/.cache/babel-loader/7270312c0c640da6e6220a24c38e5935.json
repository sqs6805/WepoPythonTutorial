{"ast":null,"code":"import _objectWithoutProperties from \"/Users/suvarna/Desktop/WepoPythonTutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"/Users/suvarna/Desktop/WepoPythonTutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/suvarna/Desktop/WepoPythonTutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { usePreviousProps } from '@mui/utils';\nimport composeClasses from '@mui/base/composeClasses';\nimport useBadge from '@mui/base/useBadge';\nimport { useSlotProps } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport capitalize from '../utils/capitalize';\nimport badgeClasses, { getBadgeUtilityClass } from './badgeClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar RADIUS_STANDARD = 10;\nvar RADIUS_DOT = 4;\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var color = ownerState.color,\n    anchorOrigin = ownerState.anchorOrigin,\n    invisible = ownerState.invisible,\n    overlap = ownerState.overlap,\n    variant = ownerState.variant,\n    _ownerState$classes = ownerState.classes,\n    classes = _ownerState$classes === void 0 ? {} : _ownerState$classes;\n  var slots = {\n    root: ['root'],\n    badge: ['badge', variant, invisible && 'invisible', \"anchorOrigin\".concat(capitalize(anchorOrigin.vertical)).concat(capitalize(anchorOrigin.horizontal)), \"anchorOrigin\".concat(capitalize(anchorOrigin.vertical)).concat(capitalize(anchorOrigin.horizontal)).concat(capitalize(overlap)), \"overlap\".concat(capitalize(overlap)), color !== 'default' && \"color\".concat(capitalize(color))]\n  };\n  return composeClasses(slots, getBadgeUtilityClass, classes);\n};\nvar BadgeRoot = styled('span', {\n  name: 'MuiBadge',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})({\n  position: 'relative',\n  display: 'inline-flex',\n  // For correct alignment with the text.\n  verticalAlign: 'middle',\n  flexShrink: 0\n});\nvar BadgeBadge = styled('span', {\n  name: 'MuiBadge',\n  slot: 'Badge',\n  overridesResolver: function overridesResolver(props, styles) {\n    var ownerState = props.ownerState;\n    return [styles.badge, styles[ownerState.variant], styles[\"anchorOrigin\".concat(capitalize(ownerState.anchorOrigin.vertical)).concat(capitalize(ownerState.anchorOrigin.horizontal)).concat(capitalize(ownerState.overlap))], ownerState.color !== 'default' && styles[\"color\".concat(capitalize(ownerState.color))], ownerState.invisible && styles.invisible];\n  }\n})(function (_ref3) {\n  var theme = _ref3.theme,\n    ownerState = _ref3.ownerState;\n  return _objectSpread({\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    alignContent: 'center',\n    alignItems: 'center',\n    position: 'absolute',\n    boxSizing: 'border-box',\n    fontFamily: theme.typography.fontFamily,\n    fontWeight: theme.typography.fontWeightMedium,\n    fontSize: theme.typography.pxToRem(12),\n    minWidth: RADIUS_STANDARD * 2,\n    lineHeight: 1,\n    padding: '0 6px',\n    height: RADIUS_STANDARD * 2,\n    borderRadius: RADIUS_STANDARD,\n    zIndex: 1,\n    // Render the badge on top of potential ripples.\n    transition: theme.transitions.create('transform', {\n      easing: theme.transitions.easing.easeInOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  }, ownerState.color !== 'default' && {\n    backgroundColor: (theme.vars || theme).palette[ownerState.color].main,\n    color: (theme.vars || theme).palette[ownerState.color].contrastText\n  }, ownerState.variant === 'dot' && {\n    borderRadius: RADIUS_DOT,\n    height: RADIUS_DOT * 2,\n    minWidth: RADIUS_DOT * 2,\n    padding: 0\n  }, ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'rectangular' && _defineProperty({\n    top: 0,\n    right: 0,\n    transform: 'scale(1) translate(50%, -50%)',\n    transformOrigin: '100% 0%'\n  }, \"&.\".concat(badgeClasses.invisible), {\n    transform: 'scale(0) translate(50%, -50%)'\n  }), ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'rectangular' && _defineProperty({\n    bottom: 0,\n    right: 0,\n    transform: 'scale(1) translate(50%, 50%)',\n    transformOrigin: '100% 100%'\n  }, \"&.\".concat(badgeClasses.invisible), {\n    transform: 'scale(0) translate(50%, 50%)'\n  }), ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'rectangular' && _defineProperty({\n    top: 0,\n    left: 0,\n    transform: 'scale(1) translate(-50%, -50%)',\n    transformOrigin: '0% 0%'\n  }, \"&.\".concat(badgeClasses.invisible), {\n    transform: 'scale(0) translate(-50%, -50%)'\n  }), ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'rectangular' && _defineProperty({\n    bottom: 0,\n    left: 0,\n    transform: 'scale(1) translate(-50%, 50%)',\n    transformOrigin: '0% 100%'\n  }, \"&.\".concat(badgeClasses.invisible), {\n    transform: 'scale(0) translate(-50%, 50%)'\n  }), ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'circular' && _defineProperty({\n    top: '14%',\n    right: '14%',\n    transform: 'scale(1) translate(50%, -50%)',\n    transformOrigin: '100% 0%'\n  }, \"&.\".concat(badgeClasses.invisible), {\n    transform: 'scale(0) translate(50%, -50%)'\n  }), ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'circular' && _defineProperty({\n    bottom: '14%',\n    right: '14%',\n    transform: 'scale(1) translate(50%, 50%)',\n    transformOrigin: '100% 100%'\n  }, \"&.\".concat(badgeClasses.invisible), {\n    transform: 'scale(0) translate(50%, 50%)'\n  }), ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'circular' && _defineProperty({\n    top: '14%',\n    left: '14%',\n    transform: 'scale(1) translate(-50%, -50%)',\n    transformOrigin: '0% 0%'\n  }, \"&.\".concat(badgeClasses.invisible), {\n    transform: 'scale(0) translate(-50%, -50%)'\n  }), ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'circular' && _defineProperty({\n    bottom: '14%',\n    left: '14%',\n    transform: 'scale(1) translate(-50%, 50%)',\n    transformOrigin: '0% 100%'\n  }, \"&.\".concat(badgeClasses.invisible), {\n    transform: 'scale(0) translate(-50%, 50%)'\n  }), ownerState.invisible && {\n    transition: theme.transitions.create('transform', {\n      easing: theme.transitions.easing.easeInOut,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  });\n});\nvar Badge = /*#__PURE__*/React.forwardRef(function Badge(inProps, ref) {\n  var _ref, _slots$root, _ref2, _slots$badge, _slotProps$root, _slotProps$badge;\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiBadge'\n  });\n  var _props$anchorOrigin = props.anchorOrigin,\n    anchorOriginProp = _props$anchorOrigin === void 0 ? {\n      vertical: 'top',\n      horizontal: 'right'\n    } : _props$anchorOrigin,\n    className = props.className,\n    classesProp = props.classes,\n    component = props.component,\n    _props$components = props.components,\n    components = _props$components === void 0 ? {} : _props$components,\n    _props$componentsProp = props.componentsProps,\n    componentsProps = _props$componentsProp === void 0 ? {} : _props$componentsProp,\n    children = props.children,\n    _props$overlap = props.overlap,\n    overlapProp = _props$overlap === void 0 ? 'rectangular' : _props$overlap,\n    _props$color = props.color,\n    colorProp = _props$color === void 0 ? 'default' : _props$color,\n    _props$invisible = props.invisible,\n    invisibleProp = _props$invisible === void 0 ? false : _props$invisible,\n    _props$max = props.max,\n    maxProp = _props$max === void 0 ? 99 : _props$max,\n    badgeContentProp = props.badgeContent,\n    slots = props.slots,\n    slotProps = props.slotProps,\n    _props$showZero = props.showZero,\n    showZero = _props$showZero === void 0 ? false : _props$showZero,\n    _props$variant = props.variant,\n    variantProp = _props$variant === void 0 ? 'standard' : _props$variant,\n    other = _objectWithoutProperties(props, [\"anchorOrigin\", \"className\", \"classes\", \"component\", \"components\", \"componentsProps\", \"children\", \"overlap\", \"color\", \"invisible\", \"max\", \"badgeContent\", \"slots\", \"slotProps\", \"showZero\", \"variant\"]);\n  var _useBadge = useBadge({\n      max: maxProp,\n      invisible: invisibleProp,\n      badgeContent: badgeContentProp,\n      showZero: showZero\n    }),\n    badgeContent = _useBadge.badgeContent,\n    invisibleFromHook = _useBadge.invisible,\n    max = _useBadge.max,\n    displayValueFromHook = _useBadge.displayValue;\n  var prevProps = usePreviousProps({\n    anchorOrigin: anchorOriginProp,\n    color: colorProp,\n    overlap: overlapProp,\n    variant: variantProp,\n    badgeContent: badgeContentProp\n  });\n  var invisible = invisibleFromHook || badgeContent == null && variantProp !== 'dot';\n  var _ref12 = invisible ? prevProps : props,\n    _ref12$color = _ref12.color,\n    color = _ref12$color === void 0 ? colorProp : _ref12$color,\n    _ref12$overlap = _ref12.overlap,\n    overlap = _ref12$overlap === void 0 ? overlapProp : _ref12$overlap,\n    _ref12$anchorOrigin = _ref12.anchorOrigin,\n    anchorOrigin = _ref12$anchorOrigin === void 0 ? anchorOriginProp : _ref12$anchorOrigin,\n    _ref12$variant = _ref12.variant,\n    variant = _ref12$variant === void 0 ? variantProp : _ref12$variant;\n  var displayValue = variant !== 'dot' ? displayValueFromHook : undefined;\n  var ownerState = _objectSpread({}, props, {\n    badgeContent: badgeContent,\n    invisible: invisible,\n    max: max,\n    displayValue: displayValue,\n    showZero: showZero,\n    anchorOrigin: anchorOrigin,\n    color: color,\n    overlap: overlap,\n    variant: variant\n  });\n  var classes = useUtilityClasses(ownerState);\n\n  // support both `slots` and `components` for backward compatibility\n  var RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : BadgeRoot;\n  var BadgeSlot = (_ref2 = (_slots$badge = slots == null ? void 0 : slots.badge) != null ? _slots$badge : components.Badge) != null ? _ref2 : BadgeBadge;\n  var rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;\n  var badgeSlotProps = (_slotProps$badge = slotProps == null ? void 0 : slotProps.badge) != null ? _slotProps$badge : componentsProps.badge;\n  var rootProps = useSlotProps({\n    elementType: RootSlot,\n    externalSlotProps: rootSlotProps,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: ref,\n      as: component\n    },\n    ownerState: ownerState,\n    className: clsx(rootSlotProps == null ? void 0 : rootSlotProps.className, classes.root, className)\n  });\n  var badgeProps = useSlotProps({\n    elementType: BadgeSlot,\n    externalSlotProps: badgeSlotProps,\n    ownerState: ownerState,\n    className: clsx(classes.badge, badgeSlotProps == null ? void 0 : badgeSlotProps.className)\n  });\n  return /*#__PURE__*/_jsxs(RootSlot, _objectSpread({}, rootProps, {\n    children: [children, /*#__PURE__*/_jsx(BadgeSlot, _objectSpread({}, badgeProps, {\n      children: displayValue\n    }))]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Badge.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\r\n   * The anchor of the badge.\r\n   * @default {\r\n   *   vertical: 'top',\r\n   *   horizontal: 'right',\r\n   * }\r\n   */\n  anchorOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOf(['left', 'right']).isRequired,\n    vertical: PropTypes.oneOf(['bottom', 'top']).isRequired\n  }),\n  /**\r\n   * The content rendered within the badge.\r\n   */\n  badgeContent: PropTypes.node,\n  /**\r\n   * The badge will be added relative to this node.\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   */\n  classes: PropTypes.object,\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n  /**\r\n   * The color of the component.\r\n   * It supports both default and custom theme colors, which can be added as shown in the\r\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\r\n   * @default 'default'\r\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\n  component: PropTypes.elementType,\n  /**\r\n   * The components used for each slot inside.\r\n   *\r\n   * This prop is an alias for the `slots` prop.\r\n   * It's recommended to use the `slots` prop instead.\r\n   *\r\n   * @default {}\r\n   */\n  components: PropTypes.shape({\n    Badge: PropTypes.elementType,\n    Root: PropTypes.elementType\n  }),\n  /**\r\n   * The extra props for the slot components.\r\n   * You can override the existing props or add new ones.\r\n   *\r\n   * This prop is an alias for the `slotProps` prop.\r\n   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.\r\n   *\r\n   * @default {}\r\n   */\n  componentsProps: PropTypes.shape({\n    badge: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\r\n   * If `true`, the badge is invisible.\r\n   * @default false\r\n   */\n  invisible: PropTypes.bool,\n  /**\r\n   * Max count to show.\r\n   * @default 99\r\n   */\n  max: PropTypes.number,\n  /**\r\n   * Wrapped shape the badge should overlap.\r\n   * @default 'rectangular'\r\n   */\n  overlap: PropTypes.oneOf(['circular', 'rectangular']),\n  /**\r\n   * Controls whether the badge is hidden when `badgeContent` is zero.\r\n   * @default false\r\n   */\n  showZero: PropTypes.bool,\n  /**\r\n   * The props used for each slot inside the Badge.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes.shape({\n    badge: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\r\n   * The components used for each slot inside the Badge.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\n  slots: PropTypes.shape({\n    badge: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\r\n   * The variant to use.\r\n   * @default 'standard'\r\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['dot', 'standard']), PropTypes.string])\n} : void 0;\nexport default Badge;","map":null,"metadata":{},"sourceType":"module"}