{"ast":null,"code":"import _objectSpread from \"/Users/suvarna/Desktop/WepoPythonTutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/suvarna/Desktop/WepoPythonTutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport composeClasses from '../composeClasses';\nimport useSwitch from '../useSwitch';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { getSwitchUtilityClass } from './switchClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var checked = ownerState.checked,\n    disabled = ownerState.disabled,\n    focusVisible = ownerState.focusVisible,\n    readOnly = ownerState.readOnly;\n  var slots = {\n    root: ['root', checked && 'checked', disabled && 'disabled', focusVisible && 'focusVisible', readOnly && 'readOnly'],\n    thumb: ['thumb'],\n    input: ['input'],\n    track: ['track']\n  };\n  return composeClasses(slots, useClassNamesOverride(getSwitchUtilityClass));\n};\n\n/**\r\n * The foundation for building custom-styled switches.\r\n *\r\n * Demos:\r\n *\r\n * - [Switch](https://mui.com/base/react-switch/)\r\n *\r\n * API:\r\n *\r\n * - [Switch API](https://mui.com/base/react-switch/components-api/#switch)\r\n */\nvar Switch = /*#__PURE__*/React.forwardRef(function Switch(props, forwardedRef) {\n  var _slots$root, _slots$thumb, _slots$input, _slots$track;\n  var checkedProp = props.checked,\n    defaultChecked = props.defaultChecked,\n    disabledProp = props.disabled,\n    onBlur = props.onBlur,\n    onChange = props.onChange,\n    onFocus = props.onFocus,\n    onFocusVisible = props.onFocusVisible,\n    readOnlyProp = props.readOnly,\n    required = props.required,\n    _props$slotProps = props.slotProps,\n    slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n    _props$slots = props.slots,\n    slots = _props$slots === void 0 ? {} : _props$slots,\n    other = _objectWithoutProperties(props, [\"checked\", \"defaultChecked\", \"disabled\", \"onBlur\", \"onChange\", \"onFocus\", \"onFocusVisible\", \"readOnly\", \"required\", \"slotProps\", \"slots\"]);\n  var useSwitchProps = {\n    checked: checkedProp,\n    defaultChecked: defaultChecked,\n    disabled: disabledProp,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    onFocusVisible: onFocusVisible,\n    readOnly: readOnlyProp\n  };\n  var _useSwitch = useSwitch(useSwitchProps),\n    getInputProps = _useSwitch.getInputProps,\n    checked = _useSwitch.checked,\n    disabled = _useSwitch.disabled,\n    focusVisible = _useSwitch.focusVisible,\n    readOnly = _useSwitch.readOnly;\n  var ownerState = _objectSpread({}, props, {\n    checked: checked,\n    disabled: disabled,\n    focusVisible: focusVisible,\n    readOnly: readOnly\n  });\n  var classes = useUtilityClasses(ownerState);\n  var Root = (_slots$root = slots.root) != null ? _slots$root : 'span';\n  var rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState: ownerState,\n    className: classes.root\n  });\n  var Thumb = (_slots$thumb = slots.thumb) != null ? _slots$thumb : 'span';\n  var thumbProps = useSlotProps({\n    elementType: Thumb,\n    externalSlotProps: slotProps.thumb,\n    ownerState: ownerState,\n    className: classes.thumb\n  });\n  var Input = (_slots$input = slots.input) != null ? _slots$input : 'input';\n  var inputProps = useSlotProps({\n    elementType: Input,\n    getSlotProps: getInputProps,\n    externalSlotProps: slotProps.input,\n    ownerState: ownerState,\n    className: classes.input\n  });\n  var Track = slots.track === null ? function () {\n    return null;\n  } : (_slots$track = slots.track) != null ? _slots$track : 'span';\n  var trackProps = useSlotProps({\n    elementType: Track,\n    externalSlotProps: slotProps.track,\n    ownerState: ownerState,\n    className: classes.track\n  });\n  return /*#__PURE__*/_jsxs(Root, _objectSpread({}, rootProps, {\n    children: [/*#__PURE__*/_jsx(Track, _objectSpread({}, trackProps)), /*#__PURE__*/_jsx(Thumb, _objectSpread({}, thumbProps)), /*#__PURE__*/_jsx(Input, _objectSpread({}, inputProps))]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Switch.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\r\n   * If `true`, the component is checked.\r\n   */\n  checked: PropTypes.bool,\n  /**\r\n   * The default checked state. Use when the component is not controlled.\r\n   */\n  defaultChecked: PropTypes.bool,\n  /**\r\n   * If `true`, the component is disabled.\r\n   */\n  disabled: PropTypes.bool,\n  /**\r\n   * @ignore\r\n   */\n  onBlur: PropTypes.func,\n  /**\r\n   * Callback fired when the state is changed.\r\n   *\r\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\r\n   * You can pull out the new value by accessing `event.target.value` (string).\r\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\r\n   */\n  onChange: PropTypes.func,\n  /**\r\n   * @ignore\r\n   */\n  onFocus: PropTypes.func,\n  /**\r\n   * @ignore\r\n   */\n  onFocusVisible: PropTypes.func,\n  /**\r\n   * If `true`, the component is read only.\r\n   */\n  readOnly: PropTypes.bool,\n  /**\r\n   * If `true`, the `input` element is required.\r\n   */\n  required: PropTypes.bool,\n  /**\r\n   * The props used for each slot inside the Switch.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes.shape({\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    thumb: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    track: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\r\n   * The components used for each slot inside the Switch.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\n  slots: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    input: PropTypes.elementType,\n    root: PropTypes.elementType,\n    thumb: PropTypes.elementType,\n    track: PropTypes.oneOfType([PropTypes.elementType, PropTypes.oneOf([null])])\n  })\n} : void 0;\nexport default Switch;","map":null,"metadata":{},"sourceType":"module"}