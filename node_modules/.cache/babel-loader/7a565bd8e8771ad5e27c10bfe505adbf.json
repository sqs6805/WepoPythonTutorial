{"ast":null,"code":"'use strict';\n\nimport dom from '../module/dom';\n\n/**\n * Inject method insert element to the domtree using Dom methods\n * @param {HTMLElement} container [description]\n * @param  {string} context - Injection context\n * @return {Object} This class intance\n */\nexport default {\n  /**\n   * [insert description]\n   * @param  {?} container [description]\n   * @param  {?} context   [description]\n   * @param  {?} debug     [description]\n   * @return {?}           [description]\n   */\n  insert: function insert(container, context) {\n    var element = this.root;\n    this.insertElement(element, container, context);\n    return this;\n  },\n  /**\n   * [insertElement description]\n    * @param  {?} element   [description]\n   * @param  {?} container [description]\n   * @param  {?} context   [description]\n   * @param  {?} debug     [description]\n   * @return {?}           [description]\n   */\n  insertElement: function insertElement(element, container, context) {\n    if (container && container.root) {\n      container = container.root;\n    }\n    this.container = container;\n\n    // if (debug) {\n    // console.log('insert', container);\n    // }\n\n    // this.emit('insert');\n\n    context = context || 'bottom';\n    var contexts = ['top', 'bottom', 'after', 'before'];\n    var methods = ['prepend', 'append', 'after', 'before'];\n    var index = contexts.indexOf(context);\n    if (index === -1) {\n      return;\n    }\n    var method = methods[index];\n\n    // this.emit('insert');\n\n    // insert component element to the dom tree using Dom\n    // console.log('dom', method, element);\n    dom[method](container, element);\n    // this.emit('injected');\n    //\n    return element;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}