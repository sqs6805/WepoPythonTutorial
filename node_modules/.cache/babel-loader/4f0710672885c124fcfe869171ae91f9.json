{"ast":null,"code":"import _objectSpread from \"/Users/suvarna/Desktop/WepoPythonTutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/suvarna/Desktop/WepoPythonTutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport composeClasses from '../composeClasses';\nimport { getTabUtilityClass } from './tabClasses';\nimport useTab from '../useTab';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var selected = ownerState.selected,\n    disabled = ownerState.disabled;\n  var slots = {\n    root: ['root', selected && 'selected', disabled && 'disabled']\n  };\n  return composeClasses(slots, useClassNamesOverride(getTabUtilityClass));\n};\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Tabs](https://mui.com/base/react-tabs/)\r\n *\r\n * API:\r\n *\r\n * - [Tab API](https://mui.com/base/react-tabs/components-api/#tab)\r\n */\nvar Tab = /*#__PURE__*/React.forwardRef(function Tab(props, forwardedRef) {\n  var _slots$root;\n  var action = props.action,\n    children = props.children,\n    valueProp = props.value,\n    _props$disabled = props.disabled,\n    disabled = _props$disabled === void 0 ? false : _props$disabled,\n    onChange = props.onChange,\n    onClick = props.onClick,\n    onFocus = props.onFocus,\n    _props$slotProps = props.slotProps,\n    slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n    _props$slots = props.slots,\n    slots = _props$slots === void 0 ? {} : _props$slots,\n    other = _objectWithoutProperties(props, [\"action\", \"children\", \"value\", \"disabled\", \"onChange\", \"onClick\", \"onFocus\", \"slotProps\", \"slots\"]);\n  var tabRef = React.useRef();\n  var handleRef = useForkRef(tabRef, forwardedRef);\n  var _useTab = useTab(_objectSpread({}, props, {\n      rootRef: handleRef\n    })),\n    active = _useTab.active,\n    highlighted = _useTab.highlighted,\n    selected = _useTab.selected,\n    getRootProps = _useTab.getRootProps;\n  var ownerState = _objectSpread({}, props, {\n    active: active,\n    disabled: disabled,\n    highlighted: highlighted,\n    selected: selected\n  });\n  var classes = useUtilityClasses(ownerState);\n  var TabRoot = (_slots$root = slots.root) != null ? _slots$root : 'button';\n  var tabRootProps = useSlotProps({\n    elementType: TabRoot,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState: ownerState,\n    className: classes.root\n  });\n  return /*#__PURE__*/_jsx(TabRoot, _objectSpread({}, tabRootProps, {\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Tab.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\r\n   * A ref for imperative actions. It currently only supports `focusVisible()` action.\r\n   */\n  action: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.shape({\n      focusVisible: PropTypes.func.isRequired\n    })\n  })]),\n  /**\r\n   * @ignore\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * If `true`, the component is disabled.\r\n   * @default false\r\n   */\n  disabled: PropTypes.bool,\n  /**\r\n   * Callback invoked when new value is being set.\r\n   */\n  onChange: PropTypes.func,\n  /**\r\n   * The props used for each slot inside the Tab.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\r\n   * The components used for each slot inside the Tab.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\r\n   * You can provide your own value. Otherwise, it falls back to the child position index.\r\n   */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : void 0;\nexport default Tab;","map":null,"metadata":{},"sourceType":"module"}