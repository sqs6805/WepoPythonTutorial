{"ast":null,"code":"import _objectSpread from \"/Users/suvarna/Desktop/WepoPythonTutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/suvarna/Desktop/WepoPythonTutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/suvarna/Desktop/WepoPythonTutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"/Users/suvarna/Desktop/WepoPythonTutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _styled;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { elementTypeAcceptingRef, refType } from '@mui/utils';\nimport composeClasses from '@mui/base/composeClasses';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport useForkRef from '../utils/useForkRef';\nimport useEventCallback from '../utils/useEventCallback';\nimport useIsFocusVisible from '../utils/useIsFocusVisible';\nimport TouchRipple from './TouchRipple';\nimport buttonBaseClasses, { getButtonBaseUtilityClass } from './buttonBaseClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var disabled = ownerState.disabled,\n    focusVisible = ownerState.focusVisible,\n    focusVisibleClassName = ownerState.focusVisibleClassName,\n    classes = ownerState.classes;\n  var slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible']\n  };\n  var composedClasses = composeClasses(slots, getButtonBaseUtilityClass, classes);\n  if (focusVisible && focusVisibleClassName) {\n    composedClasses.root += \" \".concat(focusVisibleClassName);\n  }\n  return composedClasses;\n};\nexport var ButtonBaseRoot = styled('button', {\n  name: 'MuiButtonBase',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})((_styled = {\n  display: 'inline-flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  position: 'relative',\n  boxSizing: 'border-box',\n  WebkitTapHighlightColor: 'transparent',\n  backgroundColor: 'transparent',\n  // Reset default value\n  // We disable the focus ring for mouse, touch and keyboard users.\n  outline: 0,\n  border: 0,\n  margin: 0,\n  // Remove the margin in Safari\n  borderRadius: 0,\n  padding: 0,\n  // Remove the padding in Firefox\n  cursor: 'pointer',\n  userSelect: 'none',\n  verticalAlign: 'middle',\n  MozAppearance: 'none',\n  // Reset\n  WebkitAppearance: 'none',\n  // Reset\n  textDecoration: 'none',\n  // So we take precedent over the style of a native <a /> element.\n  color: 'inherit',\n  '&::-moz-focus-inner': {\n    borderStyle: 'none' // Remove Firefox dotted outline.\n  }\n}, _defineProperty(_styled, \"&.\".concat(buttonBaseClasses.disabled), {\n  pointerEvents: 'none',\n  // Disable link interactions\n  cursor: 'default'\n}), _defineProperty(_styled, '@media print', {\n  colorAdjust: 'exact'\n}), _styled));\n\n/**\r\n * `ButtonBase` contains as few styles as possible.\r\n * It aims to be a simple building block for creating a button.\r\n * It contains a load of style reset and some focus/ripple logic.\r\n */\nvar ButtonBase = /*#__PURE__*/React.forwardRef(function ButtonBase(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiButtonBase'\n  });\n  var action = props.action,\n    _props$centerRipple = props.centerRipple,\n    centerRipple = _props$centerRipple === void 0 ? false : _props$centerRipple,\n    children = props.children,\n    className = props.className,\n    _props$component = props.component,\n    component = _props$component === void 0 ? 'button' : _props$component,\n    _props$disabled = props.disabled,\n    disabled = _props$disabled === void 0 ? false : _props$disabled,\n    _props$disableRipple = props.disableRipple,\n    disableRipple = _props$disableRipple === void 0 ? false : _props$disableRipple,\n    _props$disableTouchRi = props.disableTouchRipple,\n    disableTouchRipple = _props$disableTouchRi === void 0 ? false : _props$disableTouchRi,\n    _props$focusRipple = props.focusRipple,\n    focusRipple = _props$focusRipple === void 0 ? false : _props$focusRipple,\n    focusVisibleClassName = props.focusVisibleClassName,\n    _props$LinkComponent = props.LinkComponent,\n    LinkComponent = _props$LinkComponent === void 0 ? 'a' : _props$LinkComponent,\n    onBlur = props.onBlur,\n    onClick = props.onClick,\n    onContextMenu = props.onContextMenu,\n    onDragLeave = props.onDragLeave,\n    onFocus = props.onFocus,\n    onFocusVisible = props.onFocusVisible,\n    onKeyDown = props.onKeyDown,\n    onKeyUp = props.onKeyUp,\n    onMouseDown = props.onMouseDown,\n    onMouseLeave = props.onMouseLeave,\n    onMouseUp = props.onMouseUp,\n    onTouchEnd = props.onTouchEnd,\n    onTouchMove = props.onTouchMove,\n    onTouchStart = props.onTouchStart,\n    _props$tabIndex = props.tabIndex,\n    tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex,\n    TouchRippleProps = props.TouchRippleProps,\n    touchRippleRef = props.touchRippleRef,\n    type = props.type,\n    other = _objectWithoutProperties(props, [\"action\", \"centerRipple\", \"children\", \"className\", \"component\", \"disabled\", \"disableRipple\", \"disableTouchRipple\", \"focusRipple\", \"focusVisibleClassName\", \"LinkComponent\", \"onBlur\", \"onClick\", \"onContextMenu\", \"onDragLeave\", \"onFocus\", \"onFocusVisible\", \"onKeyDown\", \"onKeyUp\", \"onMouseDown\", \"onMouseLeave\", \"onMouseUp\", \"onTouchEnd\", \"onTouchMove\", \"onTouchStart\", \"tabIndex\", \"TouchRippleProps\", \"touchRippleRef\", \"type\"]);\n  var buttonRef = React.useRef(null);\n  var rippleRef = React.useRef(null);\n  var handleRippleRef = useForkRef(rippleRef, touchRippleRef);\n  var _useIsFocusVisible = useIsFocusVisible(),\n    isFocusVisibleRef = _useIsFocusVisible.isFocusVisibleRef,\n    handleFocusVisible = _useIsFocusVisible.onFocus,\n    handleBlurVisible = _useIsFocusVisible.onBlur,\n    focusVisibleRef = _useIsFocusVisible.ref;\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    focusVisible = _React$useState2[0],\n    setFocusVisible = _React$useState2[1];\n  if (disabled && focusVisible) {\n    setFocusVisible(false);\n  }\n  React.useImperativeHandle(action, function () {\n    return {\n      focusVisible: function focusVisible() {\n        setFocusVisible(true);\n        buttonRef.current.focus();\n      }\n    };\n  }, []);\n  var _React$useState3 = React.useState(false),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    mountedState = _React$useState4[0],\n    setMountedState = _React$useState4[1];\n  React.useEffect(function () {\n    setMountedState(true);\n  }, []);\n  var enableTouchRipple = mountedState && !disableRipple && !disabled;\n  React.useEffect(function () {\n    if (focusVisible && focusRipple && !disableRipple && mountedState) {\n      rippleRef.current.pulsate();\n    }\n  }, [disableRipple, focusRipple, focusVisible, mountedState]);\n  function useRippleHandler(rippleAction, eventCallback) {\n    var skipRippleAction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : disableTouchRipple;\n    return useEventCallback(function (event) {\n      if (eventCallback) {\n        eventCallback(event);\n      }\n      var ignore = skipRippleAction;\n      if (!ignore && rippleRef.current) {\n        rippleRef.current[rippleAction](event);\n      }\n      return true;\n    });\n  }\n  var handleMouseDown = useRippleHandler('start', onMouseDown);\n  var handleContextMenu = useRippleHandler('stop', onContextMenu);\n  var handleDragLeave = useRippleHandler('stop', onDragLeave);\n  var handleMouseUp = useRippleHandler('stop', onMouseUp);\n  var handleMouseLeave = useRippleHandler('stop', function (event) {\n    if (focusVisible) {\n      event.preventDefault();\n    }\n    if (onMouseLeave) {\n      onMouseLeave(event);\n    }\n  });\n  var handleTouchStart = useRippleHandler('start', onTouchStart);\n  var handleTouchEnd = useRippleHandler('stop', onTouchEnd);\n  var handleTouchMove = useRippleHandler('stop', onTouchMove);\n  var handleBlur = useRippleHandler('stop', function (event) {\n    handleBlurVisible(event);\n    if (isFocusVisibleRef.current === false) {\n      setFocusVisible(false);\n    }\n    if (onBlur) {\n      onBlur(event);\n    }\n  }, false);\n  var handleFocus = useEventCallback(function (event) {\n    // Fix for https://github.com/facebook/react/issues/7769\n    if (!buttonRef.current) {\n      buttonRef.current = event.currentTarget;\n    }\n    handleFocusVisible(event);\n    if (isFocusVisibleRef.current === true) {\n      setFocusVisible(true);\n      if (onFocusVisible) {\n        onFocusVisible(event);\n      }\n    }\n    if (onFocus) {\n      onFocus(event);\n    }\n  });\n  var isNonNativeButton = function isNonNativeButton() {\n    var button = buttonRef.current;\n    return component && component !== 'button' && !(button.tagName === 'A' && button.href);\n  };\n\n  /**\r\n   * IE11 shim for https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat\r\n   */\n  var keydownRef = React.useRef(false);\n  var handleKeyDown = useEventCallback(function (event) {\n    // Check if key is already down to avoid repeats being counted as multiple activations\n    if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === ' ') {\n      keydownRef.current = true;\n      rippleRef.current.stop(event, function () {\n        rippleRef.current.start(event);\n      });\n    }\n    if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') {\n      event.preventDefault();\n    }\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n\n    // Keyboard accessibility for non interactive elements\n    if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {\n      event.preventDefault();\n      if (onClick) {\n        onClick(event);\n      }\n    }\n  });\n  var handleKeyUp = useEventCallback(function (event) {\n    // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed\n    // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0\n    if (focusRipple && event.key === ' ' && rippleRef.current && focusVisible && !event.defaultPrevented) {\n      keydownRef.current = false;\n      rippleRef.current.stop(event, function () {\n        rippleRef.current.pulsate(event);\n      });\n    }\n    if (onKeyUp) {\n      onKeyUp(event);\n    }\n\n    // Keyboard accessibility for non interactive elements\n    if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) {\n      onClick(event);\n    }\n  });\n  var ComponentProp = component;\n  if (ComponentProp === 'button' && (other.href || other.to)) {\n    ComponentProp = LinkComponent;\n  }\n  var buttonProps = {};\n  if (ComponentProp === 'button') {\n    buttonProps.type = type === undefined ? 'button' : type;\n    buttonProps.disabled = disabled;\n  } else {\n    if (!other.href && !other.to) {\n      buttonProps.role = 'button';\n    }\n    if (disabled) {\n      buttonProps['aria-disabled'] = disabled;\n    }\n  }\n  var handleRef = useForkRef(ref, focusVisibleRef, buttonRef);\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(function () {\n      if (enableTouchRipple && !rippleRef.current) {\n        console.error(['MUI: The `component` prop provided to ButtonBase is invalid.', 'Please make sure the children prop is rendered in this custom component.'].join('\\n'));\n      }\n    }, [enableTouchRipple]);\n  }\n  var ownerState = _objectSpread({}, props, {\n    centerRipple: centerRipple,\n    component: component,\n    disabled: disabled,\n    disableRipple: disableRipple,\n    disableTouchRipple: disableTouchRipple,\n    focusRipple: focusRipple,\n    tabIndex: tabIndex,\n    focusVisible: focusVisible\n  });\n  var classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(ButtonBaseRoot, _objectSpread({\n    as: ComponentProp,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    onBlur: handleBlur,\n    onClick: onClick,\n    onContextMenu: handleContextMenu,\n    onFocus: handleFocus,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onMouseDown: handleMouseDown,\n    onMouseLeave: handleMouseLeave,\n    onMouseUp: handleMouseUp,\n    onDragLeave: handleDragLeave,\n    onTouchEnd: handleTouchEnd,\n    onTouchMove: handleTouchMove,\n    onTouchStart: handleTouchStart,\n    ref: handleRef,\n    tabIndex: disabled ? -1 : tabIndex,\n    type: type\n  }, buttonProps, other, {\n    children: [children, enableTouchRipple ? /*#__PURE__*/\n    /* TouchRipple is only needed client-side, x2 boost on the server. */\n    _jsx(TouchRipple, _objectSpread({\n      ref: handleRippleRef,\n      center: centerRipple\n    }, TouchRippleProps)) : null]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? ButtonBase.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\r\n   * A ref for imperative actions.\r\n   * It currently only supports `focusVisible()` action.\r\n   */\n  action: refType,\n  /**\r\n   * If `true`, the ripples are centered.\r\n   * They won't start at the cursor interaction position.\r\n   * @default false\r\n   */\n  centerRipple: PropTypes.bool,\n  /**\r\n   * The content of the component.\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   */\n  classes: PropTypes.object,\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\n  component: elementTypeAcceptingRef,\n  /**\r\n   * If `true`, the component is disabled.\r\n   * @default false\r\n   */\n  disabled: PropTypes.bool,\n  /**\r\n   * If `true`, the ripple effect is disabled.\r\n   *\r\n   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\r\n   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.\r\n   * @default false\r\n   */\n  disableRipple: PropTypes.bool,\n  /**\r\n   * If `true`, the touch ripple effect is disabled.\r\n   * @default false\r\n   */\n  disableTouchRipple: PropTypes.bool,\n  /**\r\n   * If `true`, the base button will have a keyboard focus ripple.\r\n   * @default false\r\n   */\n  focusRipple: PropTypes.bool,\n  /**\r\n   * This prop can help identify which element has keyboard focus.\r\n   * The class name will be applied when the element gains the focus through keyboard interaction.\r\n   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\r\n   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).\r\n   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components\r\n   * if needed.\r\n   */\n  focusVisibleClassName: PropTypes.string,\n  /**\r\n   * @ignore\r\n   */\n  href: PropTypes /* @typescript-to-proptypes-ignore */.any,\n  /**\r\n   * The component used to render a link when the `href` prop is provided.\r\n   * @default 'a'\r\n   */\n  LinkComponent: PropTypes.elementType,\n  /**\r\n   * @ignore\r\n   */\n  onBlur: PropTypes.func,\n  /**\r\n   * @ignore\r\n   */\n  onClick: PropTypes.func,\n  /**\r\n   * @ignore\r\n   */\n  onContextMenu: PropTypes.func,\n  /**\r\n   * @ignore\r\n   */\n  onDragLeave: PropTypes.func,\n  /**\r\n   * @ignore\r\n   */\n  onFocus: PropTypes.func,\n  /**\r\n   * Callback fired when the component is focused with a keyboard.\r\n   * We trigger a `onFocus` callback too.\r\n   */\n  onFocusVisible: PropTypes.func,\n  /**\r\n   * @ignore\r\n   */\n  onKeyDown: PropTypes.func,\n  /**\r\n   * @ignore\r\n   */\n  onKeyUp: PropTypes.func,\n  /**\r\n   * @ignore\r\n   */\n  onMouseDown: PropTypes.func,\n  /**\r\n   * @ignore\r\n   */\n  onMouseLeave: PropTypes.func,\n  /**\r\n   * @ignore\r\n   */\n  onMouseUp: PropTypes.func,\n  /**\r\n   * @ignore\r\n   */\n  onTouchEnd: PropTypes.func,\n  /**\r\n   * @ignore\r\n   */\n  onTouchMove: PropTypes.func,\n  /**\r\n   * @ignore\r\n   */\n  onTouchStart: PropTypes.func,\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\r\n   * @default 0\r\n   */\n  tabIndex: PropTypes.number,\n  /**\r\n   * Props applied to the `TouchRipple` element.\r\n   */\n  TouchRippleProps: PropTypes.object,\n  /**\r\n   * A ref that points to the `TouchRipple` element.\r\n   */\n  touchRippleRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.shape({\n      pulsate: PropTypes.func.isRequired,\n      start: PropTypes.func.isRequired,\n      stop: PropTypes.func.isRequired\n    })\n  })]),\n  /**\r\n   * @ignore\r\n   */\n  type: PropTypes.oneOfType([PropTypes.oneOf(['button', 'reset', 'submit']), PropTypes.string])\n} : void 0;\nexport default ButtonBase;","map":null,"metadata":{},"sourceType":"module"}