{"ast":null,"code":"import _objectSpread from \"/Users/suvarna/Desktop/WepoPythonTutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/suvarna/Desktop/WepoPythonTutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useId as useId, chainPropTypes, integerPropType } from '@mui/utils';\nimport { useSlotProps } from '../utils';\nimport composeClasses from '../composeClasses';\nimport isHostComponent from '../utils/isHostComponent';\nimport TablePaginationActions from './TablePaginationActions';\nimport { getTablePaginationUtilityClass } from './tablePaginationClasses';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createElement as _createElement } from \"react\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction defaultLabelDisplayedRows(_ref) {\n  var from = _ref.from,\n    to = _ref.to,\n    count = _ref.count;\n  return \"\".concat(from, \"\\u2013\").concat(to, \" of \").concat(count !== -1 ? count : \"more than \".concat(to));\n}\nfunction defaultGetAriaLabel(type) {\n  return \"Go to \".concat(type, \" page\");\n}\nvar useUtilityClasses = function useUtilityClasses() {\n  var slots = {\n    root: ['root'],\n    toolbar: ['toolbar'],\n    spacer: ['spacer'],\n    selectLabel: ['selectLabel'],\n    select: ['select'],\n    input: ['input'],\n    selectIcon: ['selectIcon'],\n    menuItem: ['menuItem'],\n    displayedRows: ['displayedRows'],\n    actions: ['actions']\n  };\n  return composeClasses(slots, useClassNamesOverride(getTablePaginationUtilityClass));\n};\n\n/**\r\n * A pagination for tables.\r\n *\r\n * Demos:\r\n *\r\n * - [Table Pagination](https://mui.com/base/react-table-pagination/)\r\n *\r\n * API:\r\n *\r\n * - [TablePagination API](https://mui.com/base/react-table-pagination/components-api/#table-pagination)\r\n */\nvar TablePagination = /*#__PURE__*/React.forwardRef(function TablePagination(props, forwardedRef) {\n  var _slots$root, _slots$select, _slots$actions, _slots$menuItem, _slots$selectLabel, _slots$displayedRows, _slots$toolbar, _slots$spacer;\n  var colSpanProp = props.colSpan,\n    count = props.count,\n    _props$getItemAriaLab = props.getItemAriaLabel,\n    getItemAriaLabel = _props$getItemAriaLab === void 0 ? defaultGetAriaLabel : _props$getItemAriaLab,\n    _props$labelDisplayed = props.labelDisplayedRows,\n    labelDisplayedRows = _props$labelDisplayed === void 0 ? defaultLabelDisplayedRows : _props$labelDisplayed,\n    labelIdProp = props.labelId,\n    _props$labelRowsPerPa = props.labelRowsPerPage,\n    labelRowsPerPage = _props$labelRowsPerPa === void 0 ? 'Rows per page:' : _props$labelRowsPerPa,\n    onPageChange = props.onPageChange,\n    onRowsPerPageChange = props.onRowsPerPageChange,\n    page = props.page,\n    rowsPerPage = props.rowsPerPage,\n    _props$rowsPerPageOpt = props.rowsPerPageOptions,\n    rowsPerPageOptions = _props$rowsPerPageOpt === void 0 ? [10, 25, 50, 100] : _props$rowsPerPageOpt,\n    selectIdProp = props.selectId,\n    _props$slotProps = props.slotProps,\n    slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n    _props$slots = props.slots,\n    slots = _props$slots === void 0 ? {} : _props$slots,\n    other = _objectWithoutProperties(props, [\"colSpan\", \"count\", \"getItemAriaLabel\", \"labelDisplayedRows\", \"labelId\", \"labelRowsPerPage\", \"onPageChange\", \"onRowsPerPageChange\", \"page\", \"rowsPerPage\", \"rowsPerPageOptions\", \"selectId\", \"slotProps\", \"slots\"]);\n  var ownerState = props;\n  var classes = useUtilityClasses();\n  var colSpan;\n  var Root = (_slots$root = slots.root) != null ? _slots$root : 'td';\n  if (Root === 'td' || !isHostComponent(Root)) {\n    colSpan = colSpanProp || 1000; // col-span over everything\n  }\n\n  var getLabelDisplayedRowsTo = function getLabelDisplayedRowsTo() {\n    if (count === -1) {\n      return (page + 1) * rowsPerPage;\n    }\n    return rowsPerPage === -1 ? count : Math.min(count, (page + 1) * rowsPerPage);\n  };\n  var selectId = useId(selectIdProp);\n  var labelId = useId(labelIdProp);\n  var rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      colSpan: colSpan,\n      ref: forwardedRef\n    },\n    ownerState: ownerState,\n    className: classes.root\n  });\n  var Select = (_slots$select = slots.select) != null ? _slots$select : 'select';\n  var selectProps = useSlotProps({\n    elementType: Select,\n    externalSlotProps: slotProps.select,\n    additionalProps: {\n      value: rowsPerPage,\n      id: selectId,\n      onChange: function onChange(event) {\n        return onRowsPerPageChange && onRowsPerPageChange(event);\n      },\n      'aria-label': rowsPerPage.toString(),\n      'aria-labelledby': [labelId, selectId].filter(Boolean).join(' ') || undefined\n    },\n    ownerState: ownerState,\n    className: classes.select\n  });\n  var Actions = (_slots$actions = slots.actions) != null ? _slots$actions : TablePaginationActions;\n  var actionsProps = useSlotProps({\n    elementType: Actions,\n    externalSlotProps: slotProps.actions,\n    additionalProps: {\n      page: page,\n      rowsPerPage: rowsPerPage,\n      count: count,\n      onPageChange: onPageChange,\n      getItemAriaLabel: getItemAriaLabel\n    },\n    ownerState: ownerState,\n    className: classes.actions\n  });\n  var MenuItem = (_slots$menuItem = slots.menuItem) != null ? _slots$menuItem : 'option';\n  var menuItemProps = useSlotProps({\n    elementType: MenuItem,\n    externalSlotProps: slotProps.menuItem,\n    additionalProps: {\n      value: undefined\n    },\n    ownerState: ownerState,\n    className: classes.menuItem\n  });\n  var SelectLabel = (_slots$selectLabel = slots.selectLabel) != null ? _slots$selectLabel : 'p';\n  var selectLabelProps = useSlotProps({\n    elementType: SelectLabel,\n    externalSlotProps: slotProps.selectLabel,\n    additionalProps: {\n      id: labelId\n    },\n    ownerState: ownerState,\n    className: classes.selectLabel\n  });\n  var DisplayedRows = (_slots$displayedRows = slots.displayedRows) != null ? _slots$displayedRows : 'p';\n  var displayedRowsProps = useSlotProps({\n    elementType: DisplayedRows,\n    externalSlotProps: slotProps.displayedRows,\n    ownerState: ownerState,\n    className: classes.displayedRows\n  });\n  var Toolbar = (_slots$toolbar = slots.toolbar) != null ? _slots$toolbar : 'div';\n  var toolbarProps = useSlotProps({\n    elementType: Toolbar,\n    externalSlotProps: slotProps.toolbar,\n    ownerState: ownerState,\n    className: classes.toolbar\n  });\n  var Spacer = (_slots$spacer = slots.spacer) != null ? _slots$spacer : 'div';\n  var spacerProps = useSlotProps({\n    elementType: Spacer,\n    externalSlotProps: slotProps.spacer,\n    ownerState: ownerState,\n    className: classes.spacer\n  });\n  return /*#__PURE__*/_jsx(Root, _objectSpread({}, rootProps, {\n    children: /*#__PURE__*/_jsxs(Toolbar, _objectSpread({}, toolbarProps, {\n      children: [/*#__PURE__*/_jsx(Spacer, _objectSpread({}, spacerProps)), rowsPerPageOptions.length > 1 && /*#__PURE__*/_jsx(SelectLabel, _objectSpread({}, selectLabelProps, {\n        children: labelRowsPerPage\n      })), rowsPerPageOptions.length > 1 && /*#__PURE__*/_jsx(Select, _objectSpread({}, selectProps, {\n        children: rowsPerPageOptions.map(function (rowsPerPageOption) {\n          return /*#__PURE__*/_createElement(MenuItem, _objectSpread({}, menuItemProps, {\n            key: typeof rowsPerPageOption !== 'number' && rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption,\n            value: typeof rowsPerPageOption !== 'number' && rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption\n          }), typeof rowsPerPageOption !== 'number' && rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption);\n        })\n      })), /*#__PURE__*/_jsx(DisplayedRows, _objectSpread({}, displayedRowsProps, {\n        children: labelDisplayedRows({\n          from: count === 0 ? 0 : page * rowsPerPage + 1,\n          to: getLabelDisplayedRowsTo(),\n          count: count === -1 ? -1 : count,\n          page: page\n        })\n      })), /*#__PURE__*/_jsx(Actions, _objectSpread({}, actionsProps))]\n    }))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TablePagination.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\r\n   * @ignore\r\n   */\n  colSpan: PropTypes.number,\n  /**\r\n   * The total number of rows.\r\n   *\r\n   * To enable server side pagination for an unknown number of items, provide -1.\r\n   */\n  count: PropTypes.number.isRequired,\n  /**\r\n   * Accepts a function which returns a string value that provides a user-friendly name for the current page.\r\n   * This is important for screen reader users.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\r\n   * @param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').\r\n   * @returns {string}\r\n   * @default function defaultGetAriaLabel(type: ItemAriaLabelType) {\r\n   *   return `Go to ${type} page`;\r\n   * }\r\n   */\n  getItemAriaLabel: PropTypes.func,\n  /**\r\n   * Customize the displayed rows label. Invoked with a `{ from, to, count, page }`\r\n   * object.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\r\n   * @default function defaultLabelDisplayedRows({ from, to, count }: LabelDisplayedRowsArgs) {\r\n   *   return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;\r\n   * }\r\n   */\n  labelDisplayedRows: PropTypes.func,\n  /**\r\n   * Id of the label element within the pagination.\r\n   */\n  labelId: PropTypes.string,\n  /**\r\n   * Customize the rows per page label.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\r\n   * @default 'Rows per page:'\r\n   */\n  labelRowsPerPage: PropTypes.node,\n  /**\r\n   * Callback fired when the page is changed.\r\n   *\r\n   * @param {React.MouseEvent<HTMLButtonElement> | null} event The event source of the callback.\r\n   * @param {number} page The page selected.\r\n   */\n  onPageChange: PropTypes.func.isRequired,\n  /**\r\n   * Callback fired when the number of rows per page is changed.\r\n   *\r\n   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.\r\n   */\n  onRowsPerPageChange: PropTypes.func,\n  /**\r\n   * The zero-based index of the current page.\r\n   */\n  page: chainPropTypes(integerPropType.isRequired, function (props) {\n    var count = props.count,\n      page = props.page,\n      rowsPerPage = props.rowsPerPage;\n    if (count === -1) {\n      return null;\n    }\n    var newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);\n    if (page < 0 || page > newLastPage) {\n      return new Error('MUI: The page prop of a TablePagination is out of range ' + \"(0 to \".concat(newLastPage, \", but page is \").concat(page, \").\"));\n    }\n    return null;\n  }),\n  /**\r\n   * The number of rows per page.\r\n   *\r\n   * Set -1 to display all the rows.\r\n   */\n  rowsPerPage: integerPropType.isRequired,\n  /**\r\n   * Customizes the options of the rows per page select field. If less than two options are\r\n   * available, no select field will be displayed.\r\n   * Use -1 for the value with a custom label to show all the rows.\r\n   * @default [10, 25, 50, 100]\r\n   */\n  rowsPerPageOptions: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired\n  })]).isRequired),\n  /**\r\n   * Id of the select element within the pagination.\r\n   */\n  selectId: PropTypes.string,\n  /**\r\n   * The props used for each slot inside the TablePagination.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    actions: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    displayedRows: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    menuItem: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    select: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    selectLabel: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    spacer: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    toolbar: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\r\n   * The components used for each slot inside the TablePagination.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\n  slots: PropTypes.shape({\n    actions: PropTypes.elementType,\n    displayedRows: PropTypes.elementType,\n    menuItem: PropTypes.elementType,\n    root: PropTypes.elementType,\n    select: PropTypes.elementType,\n    selectLabel: PropTypes.elementType,\n    spacer: PropTypes.elementType,\n    toolbar: PropTypes.elementType\n  })\n} : void 0;\nexport default TablePagination;","map":null,"metadata":{},"sourceType":"module"}