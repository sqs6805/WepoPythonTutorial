{"ast":null,"code":"import _objectSpread from \"/Users/suvarna/Desktop/WepoPythonTutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/suvarna/Desktop/WepoPythonTutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { HTMLElementType, refType } from '@mui/utils';\nimport { getMenuUtilityClass } from './menuClasses';\nimport useMenu from '../useMenu';\nimport composeClasses from '../composeClasses';\nimport Popper from '../Popper';\nimport useSlotProps from '../utils/useSlotProps';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport MenuProvider from '../useMenu/MenuProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction useUtilityClasses(ownerState) {\n  var open = ownerState.open;\n  var slots = {\n    root: ['root', open && 'expanded'],\n    listbox: ['listbox', open && 'expanded']\n  };\n  return composeClasses(slots, useClassNamesOverride(getMenuUtilityClass));\n}\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Menu](https://mui.com/base/react-menu/)\r\n *\r\n * API:\r\n *\r\n * - [Menu API](https://mui.com/base/react-menu/components-api/#menu)\r\n */\nvar Menu = /*#__PURE__*/React.forwardRef(function Menu(props, forwardedRef) {\n  var _slots$root, _slots$listbox;\n  var actions = props.actions,\n    anchorEl = props.anchorEl,\n    children = props.children,\n    defaultOpen = props.defaultOpen,\n    listboxId = props.listboxId,\n    onOpenChange = props.onOpenChange,\n    openProp = props.open,\n    _props$slotProps = props.slotProps,\n    slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n    _props$slots = props.slots,\n    slots = _props$slots === void 0 ? {} : _props$slots,\n    other = _objectWithoutProperties(props, [\"actions\", \"anchorEl\", \"children\", \"defaultOpen\", \"listboxId\", \"onOpenChange\", \"open\", \"slotProps\", \"slots\"]);\n  var _useMenu = useMenu({\n      defaultOpen: defaultOpen,\n      open: openProp,\n      onOpenChange: onOpenChange,\n      listboxId: listboxId\n    }),\n    contextValue = _useMenu.contextValue,\n    getListboxProps = _useMenu.getListboxProps,\n    dispatch = _useMenu.dispatch,\n    open = _useMenu.open;\n  React.useImperativeHandle(actions, function () {\n    return {\n      dispatch: dispatch\n    };\n  }, [dispatch]);\n  var ownerState = _objectSpread({}, props, {\n    open: open\n  });\n  var classes = useUtilityClasses(ownerState);\n  var Root = (_slots$root = slots.root) != null ? _slots$root : Popper;\n  var rootProps = useSlotProps({\n    elementType: Root,\n    externalForwardedProps: other,\n    externalSlotProps: slotProps.root,\n    additionalProps: {\n      anchorEl: anchorEl,\n      open: open,\n      keepMounted: true,\n      role: undefined,\n      ref: forwardedRef\n    },\n    className: classes.root,\n    ownerState: ownerState\n  });\n  var Listbox = (_slots$listbox = slots.listbox) != null ? _slots$listbox : 'ul';\n  var listboxProps = useSlotProps({\n    elementType: Listbox,\n    getSlotProps: getListboxProps,\n    externalSlotProps: slotProps.listbox,\n    ownerState: ownerState,\n    className: classes.listbox\n  });\n  return /*#__PURE__*/_jsx(Root, _objectSpread({}, rootProps, {\n    children: /*#__PURE__*/_jsx(Listbox, _objectSpread({}, listboxProps, {\n      children: /*#__PURE__*/_jsx(MenuProvider, {\n        value: contextValue,\n        children: children\n      })\n    }))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Menu.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\r\n   * A ref with imperative actions.\r\n   * It allows to select the first or last menu item.\r\n   */\n  actions: refType,\n  /**\r\n   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),\r\n   * or a function that returns either.\r\n   * It's used to set the position of the popper.\r\n   */\n  anchorEl: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([HTMLElementType, PropTypes.object, PropTypes.func]),\n  /**\r\n   * @ignore\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * @ignore\r\n   */\n  defaultOpen: PropTypes.bool,\n  /**\r\n   * @ignore\r\n   */\n  listboxId: PropTypes.string,\n  /**\r\n   * Triggered when focus leaves the menu and the menu should close.\r\n   */\n  onOpenChange: PropTypes.func,\n  /**\r\n   * Controls whether the menu is displayed.\r\n   * @default false\r\n   */\n  open: PropTypes.bool,\n  /**\r\n   * The props used for each slot inside the Menu.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\r\n   * The components used for each slot inside the Menu.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\n  slots: PropTypes.shape({\n    listbox: PropTypes.elementType,\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport default Menu;","map":null,"metadata":{},"sourceType":"module"}